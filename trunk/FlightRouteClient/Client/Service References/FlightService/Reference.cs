//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.FlightService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Airplane", Namespace="http://schemas.datacontract.org/2004/07/DatabaseLayer")]
    [System.SerializableAttribute()]
    public partial class Airplane : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int airplaneIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int seatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FlightService.Flight[] FlightsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int airplaneID {
            get {
                return this.airplaneIDField;
            }
            set {
                if ((this.airplaneIDField.Equals(value) != true)) {
                    this.airplaneIDField = value;
                    this.RaisePropertyChanged("airplaneID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int seats {
            get {
                return this.seatsField;
            }
            set {
                if ((this.seatsField.Equals(value) != true)) {
                    this.seatsField = value;
                    this.RaisePropertyChanged("seats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Client.FlightService.Flight[] Flights {
            get {
                return this.FlightsField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightsField, value) != true)) {
                    this.FlightsField = value;
                    this.RaisePropertyChanged("Flights");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/DatabaseLayer")]
    [System.SerializableAttribute()]
    public partial class Flight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int flightIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeOfDepartureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeOfArrivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> traveltimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int toField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> airplaneIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int takenSeatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FlightService.BookingFlight[] BookingFlightsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int flightID {
            get {
                return this.flightIDField;
            }
            set {
                if ((this.flightIDField.Equals(value) != true)) {
                    this.flightIDField = value;
                    this.RaisePropertyChanged("flightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string timeOfDeparture {
            get {
                return this.timeOfDepartureField;
            }
            set {
                if ((object.ReferenceEquals(this.timeOfDepartureField, value) != true)) {
                    this.timeOfDepartureField = value;
                    this.RaisePropertyChanged("timeOfDeparture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string timeOfArrival {
            get {
                return this.timeOfArrivalField;
            }
            set {
                if ((object.ReferenceEquals(this.timeOfArrivalField, value) != true)) {
                    this.timeOfArrivalField = value;
                    this.RaisePropertyChanged("timeOfArrival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Nullable<double> traveltime {
            get {
                return this.traveltimeField;
            }
            set {
                if ((this.traveltimeField.Equals(value) != true)) {
                    this.traveltimeField = value;
                    this.RaisePropertyChanged("traveltime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Nullable<double> price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int from {
            get {
                return this.fromField;
            }
            set {
                if ((this.fromField.Equals(value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public int to {
            get {
                return this.toField;
            }
            set {
                if ((this.toField.Equals(value) != true)) {
                    this.toField = value;
                    this.RaisePropertyChanged("to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public System.Nullable<int> airplaneID {
            get {
                return this.airplaneIDField;
            }
            set {
                if ((this.airplaneIDField.Equals(value) != true)) {
                    this.airplaneIDField = value;
                    this.RaisePropertyChanged("airplaneID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public int takenSeats {
            get {
                return this.takenSeatsField;
            }
            set {
                if ((this.takenSeatsField.Equals(value) != true)) {
                    this.takenSeatsField = value;
                    this.RaisePropertyChanged("takenSeats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=9)]
        public Client.FlightService.BookingFlight[] BookingFlights {
            get {
                return this.BookingFlightsField;
            }
            set {
                if ((object.ReferenceEquals(this.BookingFlightsField, value) != true)) {
                    this.BookingFlightsField = value;
                    this.RaisePropertyChanged("BookingFlights");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BookingFlight", Namespace="http://schemas.datacontract.org/2004/07/DatabaseLayer")]
    [System.SerializableAttribute()]
    public partial class BookingFlight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bookingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int flightIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bookingID {
            get {
                return this.bookingIDField;
            }
            set {
                if ((this.bookingIDField.Equals(value) != true)) {
                    this.bookingIDField = value;
                    this.RaisePropertyChanged("bookingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int flightID {
            get {
                return this.flightIDField;
            }
            set {
                if ((this.flightIDField.Equals(value) != true)) {
                    this.flightIDField = value;
                    this.RaisePropertyChanged("flightID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Airport", Namespace="http://schemas.datacontract.org/2004/07/DatabaseLayer")]
    [System.SerializableAttribute()]
    public partial class Airport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int airportIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string locationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FlightService.Flight[] FlightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FlightService.Flight[] Flights1Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int airportID {
            get {
                return this.airportIDField;
            }
            set {
                if ((this.airportIDField.Equals(value) != true)) {
                    this.airportIDField = value;
                    this.RaisePropertyChanged("airportID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string location {
            get {
                return this.locationField;
            }
            set {
                if ((object.ReferenceEquals(this.locationField, value) != true)) {
                    this.locationField = value;
                    this.RaisePropertyChanged("location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Client.FlightService.Flight[] Flights {
            get {
                return this.FlightsField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightsField, value) != true)) {
                    this.FlightsField = value;
                    this.RaisePropertyChanged("Flights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Client.FlightService.Flight[] Flights1 {
            get {
                return this.Flights1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Flights1Field, value) != true)) {
                    this.Flights1Field = value;
                    this.RaisePropertyChanged("Flights1");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Booking", Namespace="http://schemas.datacontract.org/2004/07/DatabaseLayer")]
    [System.SerializableAttribute()]
    public partial class Booking : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bookingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string totalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> totalPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FlightService.BookingFlight[] BookingFlightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FlightService.BookingPassenger[] BookingPassengersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bookingID {
            get {
                return this.bookingIDField;
            }
            set {
                if ((this.bookingIDField.Equals(value) != true)) {
                    this.bookingIDField = value;
                    this.RaisePropertyChanged("bookingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string totalTime {
            get {
                return this.totalTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.totalTimeField, value) != true)) {
                    this.totalTimeField = value;
                    this.RaisePropertyChanged("totalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Nullable<double> totalPrice {
            get {
                return this.totalPriceField;
            }
            set {
                if ((this.totalPriceField.Equals(value) != true)) {
                    this.totalPriceField = value;
                    this.RaisePropertyChanged("totalPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Client.FlightService.BookingFlight[] BookingFlights {
            get {
                return this.BookingFlightsField;
            }
            set {
                if ((object.ReferenceEquals(this.BookingFlightsField, value) != true)) {
                    this.BookingFlightsField = value;
                    this.RaisePropertyChanged("BookingFlights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Client.FlightService.BookingPassenger[] BookingPassengers {
            get {
                return this.BookingPassengersField;
            }
            set {
                if ((object.ReferenceEquals(this.BookingPassengersField, value) != true)) {
                    this.BookingPassengersField = value;
                    this.RaisePropertyChanged("BookingPassengers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BookingPassenger", Namespace="http://schemas.datacontract.org/2004/07/DatabaseLayer")]
    [System.SerializableAttribute()]
    public partial class BookingPassenger : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bookingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int personIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bookingID {
            get {
                return this.bookingIDField;
            }
            set {
                if ((this.bookingIDField.Equals(value) != true)) {
                    this.bookingIDField = value;
                    this.RaisePropertyChanged("bookingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int personID {
            get {
                return this.personIDField;
            }
            set {
                if ((this.personIDField.Equals(value) != true)) {
                    this.personIDField = value;
                    this.RaisePropertyChanged("personID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/DatabaseLayer")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int personIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string genderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string phoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string birthdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FlightService.BookingPassenger[] BookingPassengersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int personID {
            get {
                return this.personIDField;
            }
            set {
                if ((this.personIDField.Equals(value) != true)) {
                    this.personIDField = value;
                    this.RaisePropertyChanged("personID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string fname {
            get {
                return this.fnameField;
            }
            set {
                if ((object.ReferenceEquals(this.fnameField, value) != true)) {
                    this.fnameField = value;
                    this.RaisePropertyChanged("fname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string lname {
            get {
                return this.lnameField;
            }
            set {
                if ((object.ReferenceEquals(this.lnameField, value) != true)) {
                    this.lnameField = value;
                    this.RaisePropertyChanged("lname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string gender {
            get {
                return this.genderField;
            }
            set {
                if ((object.ReferenceEquals(this.genderField, value) != true)) {
                    this.genderField = value;
                    this.RaisePropertyChanged("gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string phoneNo {
            get {
                return this.phoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.phoneNoField, value) != true)) {
                    this.phoneNoField = value;
                    this.RaisePropertyChanged("phoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string birthdate {
            get {
                return this.birthdateField;
            }
            set {
                if ((object.ReferenceEquals(this.birthdateField, value) != true)) {
                    this.birthdateField = value;
                    this.RaisePropertyChanged("birthdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public int type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=10)]
        public Client.FlightService.BookingPassenger[] BookingPassengers {
            get {
                return this.BookingPassengersField;
            }
            set {
                if ((object.ReferenceEquals(this.BookingPassengersField, value) != true)) {
                    this.BookingPassengersField = value;
                    this.RaisePropertyChanged("BookingPassengers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FlightService.IFlightService")]
    public interface IFlightService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllAirplanes", ReplyAction="http://tempuri.org/IFlightService/GetAllAirplanesResponse")]
        Client.FlightService.Airplane[] GetAllAirplanes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllAirplanes", ReplyAction="http://tempuri.org/IFlightService/GetAllAirplanesResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Airplane[]> GetAllAirplanesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewAirplane", ReplyAction="http://tempuri.org/IFlightService/CreateNewAirplaneResponse")]
        bool CreateNewAirplane(int seats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewAirplane", ReplyAction="http://tempuri.org/IFlightService/CreateNewAirplaneResponse")]
        System.Threading.Tasks.Task<bool> CreateNewAirplaneAsync(int seats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAirplaneByID", ReplyAction="http://tempuri.org/IFlightService/GetAirplaneByIDResponse")]
        Client.FlightService.Airplane GetAirplaneByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAirplaneByID", ReplyAction="http://tempuri.org/IFlightService/GetAirplaneByIDResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Airplane> GetAirplaneByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateAirplane", ReplyAction="http://tempuri.org/IFlightService/UpdateAirplaneResponse")]
        bool UpdateAirplane(int id, int seats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateAirplane", ReplyAction="http://tempuri.org/IFlightService/UpdateAirplaneResponse")]
        System.Threading.Tasks.Task<bool> UpdateAirplaneAsync(int id, int seats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteAirplane", ReplyAction="http://tempuri.org/IFlightService/DeleteAirplaneResponse")]
        bool DeleteAirplane(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteAirplane", ReplyAction="http://tempuri.org/IFlightService/DeleteAirplaneResponse")]
        System.Threading.Tasks.Task<bool> DeleteAirplaneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllAirports", ReplyAction="http://tempuri.org/IFlightService/GetAllAirportsResponse")]
        Client.FlightService.Airport[] GetAllAirports();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllAirports", ReplyAction="http://tempuri.org/IFlightService/GetAllAirportsResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Airport[]> GetAllAirportsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAirportByID", ReplyAction="http://tempuri.org/IFlightService/GetAirportByIDResponse")]
        Client.FlightService.Airport GetAirportByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAirportByID", ReplyAction="http://tempuri.org/IFlightService/GetAirportByIDResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Airport> GetAirportByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewAirport", ReplyAction="http://tempuri.org/IFlightService/CreateNewAirportResponse")]
        bool CreateNewAirport(string name, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewAirport", ReplyAction="http://tempuri.org/IFlightService/CreateNewAirportResponse")]
        System.Threading.Tasks.Task<bool> CreateNewAirportAsync(string name, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateAirport", ReplyAction="http://tempuri.org/IFlightService/UpdateAirportResponse")]
        bool UpdateAirport(int id, string name, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateAirport", ReplyAction="http://tempuri.org/IFlightService/UpdateAirportResponse")]
        System.Threading.Tasks.Task<bool> UpdateAirportAsync(int id, string name, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteAirport", ReplyAction="http://tempuri.org/IFlightService/DeleteAirportResponse")]
        bool DeleteAirport(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteAirport", ReplyAction="http://tempuri.org/IFlightService/DeleteAirportResponse")]
        System.Threading.Tasks.Task<bool> DeleteAirportAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllBookings", ReplyAction="http://tempuri.org/IFlightService/GetAllBookingsResponse")]
        Client.FlightService.Booking[] GetAllBookings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllBookings", ReplyAction="http://tempuri.org/IFlightService/GetAllBookingsResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Booking[]> GetAllBookingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetBookingByID", ReplyAction="http://tempuri.org/IFlightService/GetBookingByIDResponse")]
        Client.FlightService.Booking GetBookingByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetBookingByID", ReplyAction="http://tempuri.org/IFlightService/GetBookingByIDResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Booking> GetBookingByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewBooking", ReplyAction="http://tempuri.org/IFlightService/CreateNewBookingResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        bool CreateNewBooking(int[] flightIDs, int[] personIDs, string totalTime, double totalPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewBooking", ReplyAction="http://tempuri.org/IFlightService/CreateNewBookingResponse")]
        System.Threading.Tasks.Task<bool> CreateNewBookingAsync(int[] flightIDs, int[] personIDs, string totalTime, double totalPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateBooking", ReplyAction="http://tempuri.org/IFlightService/UpdateBookingResponse")]
        bool UpdateBooking(int id, string totalTime, double totalPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateBooking", ReplyAction="http://tempuri.org/IFlightService/UpdateBookingResponse")]
        System.Threading.Tasks.Task<bool> UpdateBookingAsync(int id, string totalTime, double totalPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteBooking", ReplyAction="http://tempuri.org/IFlightService/DeleteBookingResponse")]
        bool DeleteBooking(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteBooking", ReplyAction="http://tempuri.org/IFlightService/DeleteBookingResponse")]
        System.Threading.Tasks.Task<bool> DeleteBookingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetBookingPassengers", ReplyAction="http://tempuri.org/IFlightService/GetBookingPassengersResponse")]
        Client.FlightService.BookingPassenger[] GetBookingPassengers(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetBookingPassengers", ReplyAction="http://tempuri.org/IFlightService/GetBookingPassengersResponse")]
        System.Threading.Tasks.Task<Client.FlightService.BookingPassenger[]> GetBookingPassengersAsync(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetBookingFlights", ReplyAction="http://tempuri.org/IFlightService/GetBookingFlightsResponse")]
        Client.FlightService.BookingFlight[] GetBookingFlights(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetBookingFlights", ReplyAction="http://tempuri.org/IFlightService/GetBookingFlightsResponse")]
        System.Threading.Tasks.Task<Client.FlightService.BookingFlight[]> GetBookingFlightsAsync(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetPersonsFromBooking", ReplyAction="http://tempuri.org/IFlightService/GetPersonsFromBookingResponse")]
        Client.FlightService.Person[] GetPersonsFromBooking(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetPersonsFromBooking", ReplyAction="http://tempuri.org/IFlightService/GetPersonsFromBookingResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Person[]> GetPersonsFromBookingAsync(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightsFromBooking", ReplyAction="http://tempuri.org/IFlightService/GetFlightsFromBookingResponse")]
        Client.FlightService.Flight[] GetFlightsFromBooking(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightsFromBooking", ReplyAction="http://tempuri.org/IFlightService/GetFlightsFromBookingResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetFlightsFromBookingAsync(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/RunDijkstra", ReplyAction="http://tempuri.org/IFlightService/RunDijkstraResponse")]
        Client.FlightService.Flight[] RunDijkstra(Client.FlightService.Airport from, Client.FlightService.Airport to, string date, bool usePrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/RunDijkstra", ReplyAction="http://tempuri.org/IFlightService/RunDijkstraResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> RunDijkstraAsync(Client.FlightService.Airport from, Client.FlightService.Airport to, string date, bool usePrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/RunDijkstraCheapest", ReplyAction="http://tempuri.org/IFlightService/RunDijkstraCheapestResponse")]
        Client.FlightService.Flight[] RunDijkstraCheapest(Client.FlightService.Airport from, Client.FlightService.Airport to, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/RunDijkstraCheapest", ReplyAction="http://tempuri.org/IFlightService/RunDijkstraCheapestResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> RunDijkstraCheapestAsync(Client.FlightService.Airport from, Client.FlightService.Airport to, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/RunDijkstraFastest", ReplyAction="http://tempuri.org/IFlightService/RunDijkstraFastestResponse")]
        Client.FlightService.Flight[] RunDijkstraFastest(Client.FlightService.Airport from, Client.FlightService.Airport to, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/RunDijkstraFastest", ReplyAction="http://tempuri.org/IFlightService/RunDijkstraFastestResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> RunDijkstraFastestAsync(Client.FlightService.Airport from, Client.FlightService.Airport to, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFlights", ReplyAction="http://tempuri.org/IFlightService/GetAllFlightsResponse")]
        Client.FlightService.Flight[] GetAllFlights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFlights", ReplyAction="http://tempuri.org/IFlightService/GetAllFlightsResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetAllFlightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightByID", ReplyAction="http://tempuri.org/IFlightService/GetFlightByIDResponse")]
        Client.FlightService.Flight GetFlightByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightByID", ReplyAction="http://tempuri.org/IFlightService/GetFlightByIDResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight> GetFlightByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFlightsByDate", ReplyAction="http://tempuri.org/IFlightService/GetAllFlightsByDateResponse")]
        Client.FlightService.Flight[] GetAllFlightsByDate(System.DateTime fromDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFlightsByDate", ReplyAction="http://tempuri.org/IFlightService/GetAllFlightsByDateResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetAllFlightsByDateAsync(System.DateTime fromDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightsByDate", ReplyAction="http://tempuri.org/IFlightService/GetFlightsByDateResponse")]
        Client.FlightService.Flight[] GetFlightsByDate(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightsByDate", ReplyAction="http://tempuri.org/IFlightService/GetFlightsByDateResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetFlightsByDateAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightsFrom", ReplyAction="http://tempuri.org/IFlightService/GetFlightsFromResponse")]
        Client.FlightService.Flight[] GetFlightsFrom(Client.FlightService.Airport start, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlightsFrom", ReplyAction="http://tempuri.org/IFlightService/GetFlightsFromResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetFlightsFromAsync(Client.FlightService.Airport start, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewFlight", ReplyAction="http://tempuri.org/IFlightService/CreateNewFlightResponse")]
        bool CreateNewFlight(string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewFlight", ReplyAction="http://tempuri.org/IFlightService/CreateNewFlightResponse")]
        System.Threading.Tasks.Task<bool> CreateNewFlightAsync(string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateFlight", ReplyAction="http://tempuri.org/IFlightService/UpdateFlightResponse")]
        bool UpdateFlight(int id, string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateFlight", ReplyAction="http://tempuri.org/IFlightService/UpdateFlightResponse")]
        System.Threading.Tasks.Task<bool> UpdateFlightAsync(int id, string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteFlight", ReplyAction="http://tempuri.org/IFlightService/DeleteFlightResponse")]
        bool DeleteFlight(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteFlight", ReplyAction="http://tempuri.org/IFlightService/DeleteFlightResponse")]
        System.Threading.Tasks.Task<bool> DeleteFlightAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllPersons", ReplyAction="http://tempuri.org/IFlightService/GetAllPersonsResponse")]
        Client.FlightService.Person[] GetAllPersons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllPersons", ReplyAction="http://tempuri.org/IFlightService/GetAllPersonsResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Person[]> GetAllPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetPersonByID", ReplyAction="http://tempuri.org/IFlightService/GetPersonByIDResponse")]
        Client.FlightService.Person GetPersonByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetPersonByID", ReplyAction="http://tempuri.org/IFlightService/GetPersonByIDResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Person> GetPersonByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewPerson", ReplyAction="http://tempuri.org/IFlightService/CreateNewPersonResponse")]
        bool CreateNewPerson(string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewPerson", ReplyAction="http://tempuri.org/IFlightService/CreateNewPersonResponse")]
        System.Threading.Tasks.Task<bool> CreateNewPersonAsync(string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewPersonBookingFull", ReplyAction="http://tempuri.org/IFlightService/CreateNewPersonBookingFullResponse")]
        Client.FlightService.Person CreateNewPersonBookingFull(string fName, string lName, string gender, string address, string phoneNo, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewPersonBookingFull", ReplyAction="http://tempuri.org/IFlightService/CreateNewPersonBookingFullResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Person> CreateNewPersonBookingFullAsync(string fName, string lName, string gender, string address, string phoneNo, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewPersonBooking", ReplyAction="http://tempuri.org/IFlightService/CreateNewPersonBookingResponse")]
        Client.FlightService.Person CreateNewPersonBooking(string fName, string lName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/CreateNewPersonBooking", ReplyAction="http://tempuri.org/IFlightService/CreateNewPersonBookingResponse")]
        System.Threading.Tasks.Task<Client.FlightService.Person> CreateNewPersonBookingAsync(string fName, string lName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdatePerson", ReplyAction="http://tempuri.org/IFlightService/UpdatePersonResponse")]
        bool UpdatePerson(int id, string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdatePerson", ReplyAction="http://tempuri.org/IFlightService/UpdatePersonResponse")]
        System.Threading.Tasks.Task<bool> UpdatePersonAsync(int id, string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeletePerson", ReplyAction="http://tempuri.org/IFlightService/DeletePersonResponse")]
        bool DeletePerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeletePerson", ReplyAction="http://tempuri.org/IFlightService/DeletePersonResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlightServiceChannel : Client.FlightService.IFlightService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FlightServiceClient : System.ServiceModel.ClientBase<Client.FlightService.IFlightService>, Client.FlightService.IFlightService {
        
        public FlightServiceClient() {
        }
        
        public FlightServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.FlightService.Airplane[] GetAllAirplanes() {
            return base.Channel.GetAllAirplanes();
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Airplane[]> GetAllAirplanesAsync() {
            return base.Channel.GetAllAirplanesAsync();
        }
        
        public bool CreateNewAirplane(int seats) {
            return base.Channel.CreateNewAirplane(seats);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewAirplaneAsync(int seats) {
            return base.Channel.CreateNewAirplaneAsync(seats);
        }
        
        public Client.FlightService.Airplane GetAirplaneByID(int id) {
            return base.Channel.GetAirplaneByID(id);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Airplane> GetAirplaneByIDAsync(int id) {
            return base.Channel.GetAirplaneByIDAsync(id);
        }
        
        public bool UpdateAirplane(int id, int seats) {
            return base.Channel.UpdateAirplane(id, seats);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAirplaneAsync(int id, int seats) {
            return base.Channel.UpdateAirplaneAsync(id, seats);
        }
        
        public bool DeleteAirplane(int id) {
            return base.Channel.DeleteAirplane(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAirplaneAsync(int id) {
            return base.Channel.DeleteAirplaneAsync(id);
        }
        
        public Client.FlightService.Airport[] GetAllAirports() {
            return base.Channel.GetAllAirports();
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Airport[]> GetAllAirportsAsync() {
            return base.Channel.GetAllAirportsAsync();
        }
        
        public Client.FlightService.Airport GetAirportByID(int id) {
            return base.Channel.GetAirportByID(id);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Airport> GetAirportByIDAsync(int id) {
            return base.Channel.GetAirportByIDAsync(id);
        }
        
        public bool CreateNewAirport(string name, string location) {
            return base.Channel.CreateNewAirport(name, location);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewAirportAsync(string name, string location) {
            return base.Channel.CreateNewAirportAsync(name, location);
        }
        
        public bool UpdateAirport(int id, string name, string location) {
            return base.Channel.UpdateAirport(id, name, location);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAirportAsync(int id, string name, string location) {
            return base.Channel.UpdateAirportAsync(id, name, location);
        }
        
        public bool DeleteAirport(int id) {
            return base.Channel.DeleteAirport(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAirportAsync(int id) {
            return base.Channel.DeleteAirportAsync(id);
        }
        
        public Client.FlightService.Booking[] GetAllBookings() {
            return base.Channel.GetAllBookings();
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Booking[]> GetAllBookingsAsync() {
            return base.Channel.GetAllBookingsAsync();
        }
        
        public Client.FlightService.Booking GetBookingByID(int id) {
            return base.Channel.GetBookingByID(id);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Booking> GetBookingByIDAsync(int id) {
            return base.Channel.GetBookingByIDAsync(id);
        }
        
        public bool CreateNewBooking(int[] flightIDs, int[] personIDs, string totalTime, double totalPrice) {
            return base.Channel.CreateNewBooking(flightIDs, personIDs, totalTime, totalPrice);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewBookingAsync(int[] flightIDs, int[] personIDs, string totalTime, double totalPrice) {
            return base.Channel.CreateNewBookingAsync(flightIDs, personIDs, totalTime, totalPrice);
        }
        
        public bool UpdateBooking(int id, string totalTime, double totalPrice) {
            return base.Channel.UpdateBooking(id, totalTime, totalPrice);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBookingAsync(int id, string totalTime, double totalPrice) {
            return base.Channel.UpdateBookingAsync(id, totalTime, totalPrice);
        }
        
        public bool DeleteBooking(int id) {
            return base.Channel.DeleteBooking(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBookingAsync(int id) {
            return base.Channel.DeleteBookingAsync(id);
        }
        
        public Client.FlightService.BookingPassenger[] GetBookingPassengers(int bookingId) {
            return base.Channel.GetBookingPassengers(bookingId);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.BookingPassenger[]> GetBookingPassengersAsync(int bookingId) {
            return base.Channel.GetBookingPassengersAsync(bookingId);
        }
        
        public Client.FlightService.BookingFlight[] GetBookingFlights(int bookingId) {
            return base.Channel.GetBookingFlights(bookingId);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.BookingFlight[]> GetBookingFlightsAsync(int bookingId) {
            return base.Channel.GetBookingFlightsAsync(bookingId);
        }
        
        public Client.FlightService.Person[] GetPersonsFromBooking(int bookingId) {
            return base.Channel.GetPersonsFromBooking(bookingId);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Person[]> GetPersonsFromBookingAsync(int bookingId) {
            return base.Channel.GetPersonsFromBookingAsync(bookingId);
        }
        
        public Client.FlightService.Flight[] GetFlightsFromBooking(int bookingId) {
            return base.Channel.GetFlightsFromBooking(bookingId);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetFlightsFromBookingAsync(int bookingId) {
            return base.Channel.GetFlightsFromBookingAsync(bookingId);
        }
        
        public Client.FlightService.Flight[] RunDijkstra(Client.FlightService.Airport from, Client.FlightService.Airport to, string date, bool usePrice) {
            return base.Channel.RunDijkstra(from, to, date, usePrice);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> RunDijkstraAsync(Client.FlightService.Airport from, Client.FlightService.Airport to, string date, bool usePrice) {
            return base.Channel.RunDijkstraAsync(from, to, date, usePrice);
        }
        
        public Client.FlightService.Flight[] RunDijkstraCheapest(Client.FlightService.Airport from, Client.FlightService.Airport to, string date) {
            return base.Channel.RunDijkstraCheapest(from, to, date);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> RunDijkstraCheapestAsync(Client.FlightService.Airport from, Client.FlightService.Airport to, string date) {
            return base.Channel.RunDijkstraCheapestAsync(from, to, date);
        }
        
        public Client.FlightService.Flight[] RunDijkstraFastest(Client.FlightService.Airport from, Client.FlightService.Airport to, string date) {
            return base.Channel.RunDijkstraFastest(from, to, date);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> RunDijkstraFastestAsync(Client.FlightService.Airport from, Client.FlightService.Airport to, string date) {
            return base.Channel.RunDijkstraFastestAsync(from, to, date);
        }
        
        public Client.FlightService.Flight[] GetAllFlights() {
            return base.Channel.GetAllFlights();
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetAllFlightsAsync() {
            return base.Channel.GetAllFlightsAsync();
        }
        
        public Client.FlightService.Flight GetFlightByID(int id) {
            return base.Channel.GetFlightByID(id);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight> GetFlightByIDAsync(int id) {
            return base.Channel.GetFlightByIDAsync(id);
        }
        
        public Client.FlightService.Flight[] GetAllFlightsByDate(System.DateTime fromDate) {
            return base.Channel.GetAllFlightsByDate(fromDate);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetAllFlightsByDateAsync(System.DateTime fromDate) {
            return base.Channel.GetAllFlightsByDateAsync(fromDate);
        }
        
        public Client.FlightService.Flight[] GetFlightsByDate(string date) {
            return base.Channel.GetFlightsByDate(date);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetFlightsByDateAsync(string date) {
            return base.Channel.GetFlightsByDateAsync(date);
        }
        
        public Client.FlightService.Flight[] GetFlightsFrom(Client.FlightService.Airport start, string date) {
            return base.Channel.GetFlightsFrom(start, date);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Flight[]> GetFlightsFromAsync(Client.FlightService.Airport start, string date) {
            return base.Channel.GetFlightsFromAsync(start, date);
        }
        
        public bool CreateNewFlight(string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats) {
            return base.Channel.CreateNewFlight(timeOfDepature, timeOfArrival, travelTime, price, from, to, airplaneID, takenSeats);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewFlightAsync(string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats) {
            return base.Channel.CreateNewFlightAsync(timeOfDepature, timeOfArrival, travelTime, price, from, to, airplaneID, takenSeats);
        }
        
        public bool UpdateFlight(int id, string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats) {
            return base.Channel.UpdateFlight(id, timeOfDepature, timeOfArrival, travelTime, price, from, to, airplaneID, takenSeats);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFlightAsync(int id, string timeOfDepature, string timeOfArrival, double travelTime, double price, int from, int to, int airplaneID, int takenSeats) {
            return base.Channel.UpdateFlightAsync(id, timeOfDepature, timeOfArrival, travelTime, price, from, to, airplaneID, takenSeats);
        }
        
        public bool DeleteFlight(int id) {
            return base.Channel.DeleteFlight(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFlightAsync(int id) {
            return base.Channel.DeleteFlightAsync(id);
        }
        
        public Client.FlightService.Person[] GetAllPersons() {
            return base.Channel.GetAllPersons();
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Person[]> GetAllPersonsAsync() {
            return base.Channel.GetAllPersonsAsync();
        }
        
        public Client.FlightService.Person GetPersonByID(int id) {
            return base.Channel.GetPersonByID(id);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Person> GetPersonByIDAsync(int id) {
            return base.Channel.GetPersonByIDAsync(id);
        }
        
        public bool CreateNewPerson(string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate) {
            return base.Channel.CreateNewPerson(fName, lName, gender, address, phoneNo, email, birthdate);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewPersonAsync(string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate) {
            return base.Channel.CreateNewPersonAsync(fName, lName, gender, address, phoneNo, email, birthdate);
        }
        
        public Client.FlightService.Person CreateNewPersonBookingFull(string fName, string lName, string gender, string address, string phoneNo, string email) {
            return base.Channel.CreateNewPersonBookingFull(fName, lName, gender, address, phoneNo, email);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Person> CreateNewPersonBookingFullAsync(string fName, string lName, string gender, string address, string phoneNo, string email) {
            return base.Channel.CreateNewPersonBookingFullAsync(fName, lName, gender, address, phoneNo, email);
        }
        
        public Client.FlightService.Person CreateNewPersonBooking(string fName, string lName) {
            return base.Channel.CreateNewPersonBooking(fName, lName);
        }
        
        public System.Threading.Tasks.Task<Client.FlightService.Person> CreateNewPersonBookingAsync(string fName, string lName) {
            return base.Channel.CreateNewPersonBookingAsync(fName, lName);
        }
        
        public bool UpdatePerson(int id, string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate) {
            return base.Channel.UpdatePerson(id, fName, lName, gender, address, phoneNo, email, birthdate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePersonAsync(int id, string fName, string lName, string gender, string address, string phoneNo, string email, string birthdate) {
            return base.Channel.UpdatePersonAsync(id, fName, lName, gender, address, phoneNo, email, birthdate);
        }
        
        public bool DeletePerson(int id) {
            return base.Channel.DeletePerson(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonAsync(int id) {
            return base.Channel.DeletePersonAsync(id);
        }
    }
}
