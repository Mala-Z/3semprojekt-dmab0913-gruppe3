#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dmab0913_3")]
	public partial class dmab0913_3DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAirplane(Airplane instance);
    partial void UpdateAirplane(Airplane instance);
    partial void DeleteAirplane(Airplane instance);
    partial void InsertAirport(Airport instance);
    partial void UpdateAirport(Airport instance);
    partial void DeleteAirport(Airport instance);
    partial void InsertBooking(Booking instance);
    partial void UpdateBooking(Booking instance);
    partial void DeleteBooking(Booking instance);
    partial void InsertBookingFlight(BookingFlight instance);
    partial void UpdateBookingFlight(BookingFlight instance);
    partial void DeleteBookingFlight(BookingFlight instance);
    partial void InsertBookingPassenger(BookingPassenger instance);
    partial void UpdateBookingPassenger(BookingPassenger instance);
    partial void DeleteBookingPassenger(BookingPassenger instance);
    partial void InsertFlight(Flight instance);
    partial void UpdateFlight(Flight instance);
    partial void DeleteFlight(Flight instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    #endregion
		
		public dmab0913_3DataContext() : 
				base(global::DatabaseLayer.Properties.Settings.Default.dmab0913_3ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dmab0913_3DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dmab0913_3DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dmab0913_3DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dmab0913_3DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Airplane> Airplanes
		{
			get
			{
				return this.GetTable<Airplane>();
			}
		}
		
		public System.Data.Linq.Table<Airport> Airports
		{
			get
			{
				return this.GetTable<Airport>();
			}
		}
		
		public System.Data.Linq.Table<Booking> Bookings
		{
			get
			{
				return this.GetTable<Booking>();
			}
		}
		
		public System.Data.Linq.Table<BookingFlight> BookingFlights
		{
			get
			{
				return this.GetTable<BookingFlight>();
			}
		}
		
		public System.Data.Linq.Table<BookingPassenger> BookingPassengers
		{
			get
			{
				return this.GetTable<BookingPassenger>();
			}
		}
		
		public System.Data.Linq.Table<Flight> Flights
		{
			get
			{
				return this.GetTable<Flight>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="db_owner.Airplane")]
	public partial class Airplane : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _airplaneID;
		
		private int _seats;
		
		private EntitySet<Flight> _Flights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnairplaneIDChanging(int value);
    partial void OnairplaneIDChanged();
    partial void OnseatsChanging(int value);
    partial void OnseatsChanged();
    #endregion
		
		public Airplane()
		{
			this._Flights = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights), new Action<Flight>(this.detach_Flights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airplaneID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int airplaneID
		{
			get
			{
				return this._airplaneID;
			}
			set
			{
				if ((this._airplaneID != value))
				{
					this.OnairplaneIDChanging(value);
					this.SendPropertyChanging();
					this._airplaneID = value;
					this.SendPropertyChanged("airplaneID");
					this.OnairplaneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seats", DbType="Int NOT NULL")]
		public int seats
		{
			get
			{
				return this._seats;
			}
			set
			{
				if ((this._seats != value))
				{
					this.OnseatsChanging(value);
					this.SendPropertyChanging();
					this._seats = value;
					this.SendPropertyChanged("seats");
					this.OnseatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airplane_Flight", Storage="_Flights", ThisKey="airplaneID", OtherKey="airplaneID")]
		public EntitySet<Flight> Flights
		{
			get
			{
				return this._Flights;
			}
			set
			{
				this._Flights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airplane = this;
		}
		
		private void detach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airplane = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="db_owner.Airport")]
	public partial class Airport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _airportID;
		
		private string _name;
		
		private string _location;
		
		private EntitySet<Flight> _Flights;
		
		private EntitySet<Flight> _Flights1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnairportIDChanging(int value);
    partial void OnairportIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public Airport()
		{
			this._Flights = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights), new Action<Flight>(this.detach_Flights));
			this._Flights1 = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights1), new Action<Flight>(this.detach_Flights1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int airportID
		{
			get
			{
				return this._airportID;
			}
			set
			{
				if ((this._airportID != value))
				{
					this.OnairportIDChanging(value);
					this.SendPropertyChanging();
					this._airportID = value;
					this.SendPropertyChanged("airportID");
					this.OnairportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight", Storage="_Flights", ThisKey="airportID", OtherKey="from")]
		public EntitySet<Flight> Flights
		{
			get
			{
				return this._Flights;
			}
			set
			{
				this._Flights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight1", Storage="_Flights1", ThisKey="airportID", OtherKey="to")]
		public EntitySet<Flight> Flights1
		{
			get
			{
				return this._Flights1;
			}
			set
			{
				this._Flights1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport = this;
		}
		
		private void detach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport = null;
		}
		
		private void attach_Flights1(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = this;
		}
		
		private void detach_Flights1(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="db_owner.Booking")]
	public partial class Booking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bookingID;
		
		private string _totalTime;
		
		private System.Nullable<double> _totalPrice;
		
		private EntitySet<BookingFlight> _BookingFlights;
		
		private EntitySet<BookingPassenger> _BookingPassengers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookingIDChanging(int value);
    partial void OnbookingIDChanged();
    partial void OntotalTimeChanging(string value);
    partial void OntotalTimeChanged();
    partial void OntotalPriceChanging(System.Nullable<double> value);
    partial void OntotalPriceChanged();
    #endregion
		
		public Booking()
		{
			this._BookingFlights = new EntitySet<BookingFlight>(new Action<BookingFlight>(this.attach_BookingFlights), new Action<BookingFlight>(this.detach_BookingFlights));
			this._BookingPassengers = new EntitySet<BookingPassenger>(new Action<BookingPassenger>(this.attach_BookingPassengers), new Action<BookingPassenger>(this.detach_BookingPassengers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bookingID
		{
			get
			{
				return this._bookingID;
			}
			set
			{
				if ((this._bookingID != value))
				{
					this.OnbookingIDChanging(value);
					this.SendPropertyChanging();
					this._bookingID = value;
					this.SendPropertyChanged("bookingID");
					this.OnbookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalTime", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string totalTime
		{
			get
			{
				return this._totalTime;
			}
			set
			{
				if ((this._totalTime != value))
				{
					this.OntotalTimeChanging(value);
					this.SendPropertyChanging();
					this._totalTime = value;
					this.SendPropertyChanged("totalTime");
					this.OntotalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float")]
		public System.Nullable<double> totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this.OntotalPriceChanging(value);
					this.SendPropertyChanging();
					this._totalPrice = value;
					this.SendPropertyChanged("totalPrice");
					this.OntotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_BookingFlight", Storage="_BookingFlights", ThisKey="bookingID", OtherKey="bookingID")]
		public EntitySet<BookingFlight> BookingFlights
		{
			get
			{
				return this._BookingFlights;
			}
			set
			{
				this._BookingFlights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_BookingPassenger", Storage="_BookingPassengers", ThisKey="bookingID", OtherKey="bookingID")]
		public EntitySet<BookingPassenger> BookingPassengers
		{
			get
			{
				return this._BookingPassengers;
			}
			set
			{
				this._BookingPassengers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookingFlights(BookingFlight entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_BookingFlights(BookingFlight entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
		
		private void attach_BookingPassengers(BookingPassenger entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_BookingPassengers(BookingPassenger entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="db_owner.BookingFlight")]
	public partial class BookingFlight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bookingID;
		
		private int _flightID;
		
		private EntityRef<Booking> _Booking;
		
		private EntityRef<Flight> _Flight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookingIDChanging(int value);
    partial void OnbookingIDChanged();
    partial void OnflightIDChanging(int value);
    partial void OnflightIDChanged();
    #endregion
		
		public BookingFlight()
		{
			this._Booking = default(EntityRef<Booking>);
			this._Flight = default(EntityRef<Flight>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int bookingID
		{
			get
			{
				return this._bookingID;
			}
			set
			{
				if ((this._bookingID != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookingIDChanging(value);
					this.SendPropertyChanging();
					this._bookingID = value;
					this.SendPropertyChanged("bookingID");
					this.OnbookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flightID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int flightID
		{
			get
			{
				return this._flightID;
			}
			set
			{
				if ((this._flightID != value))
				{
					if (this._Flight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnflightIDChanging(value);
					this.SendPropertyChanging();
					this._flightID = value;
					this.SendPropertyChanged("flightID");
					this.OnflightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_BookingFlight", Storage="_Booking", ThisKey="bookingID", OtherKey="bookingID", IsForeignKey=true)]
		public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.BookingFlights.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.BookingFlights.Add(this);
						this._bookingID = value.bookingID;
					}
					else
					{
						this._bookingID = default(int);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_BookingFlight", Storage="_Flight", ThisKey="flightID", OtherKey="flightID", IsForeignKey=true)]
		public Flight Flight
		{
			get
			{
				return this._Flight.Entity;
			}
			set
			{
				Flight previousValue = this._Flight.Entity;
				if (((previousValue != value) 
							|| (this._Flight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flight.Entity = null;
						previousValue.BookingFlights.Remove(this);
					}
					this._Flight.Entity = value;
					if ((value != null))
					{
						value.BookingFlights.Add(this);
						this._flightID = value.flightID;
					}
					else
					{
						this._flightID = default(int);
					}
					this.SendPropertyChanged("Flight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="db_owner.BookingPassenger")]
	public partial class BookingPassenger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bookingID;
		
		private int _personID;
		
		private EntityRef<Booking> _Booking;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookingIDChanging(int value);
    partial void OnbookingIDChanged();
    partial void OnpersonIDChanging(int value);
    partial void OnpersonIDChanged();
    #endregion
		
		public BookingPassenger()
		{
			this._Booking = default(EntityRef<Booking>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int bookingID
		{
			get
			{
				return this._bookingID;
			}
			set
			{
				if ((this._bookingID != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookingIDChanging(value);
					this.SendPropertyChanging();
					this._bookingID = value;
					this.SendPropertyChanged("bookingID");
					this.OnbookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int personID
		{
			get
			{
				return this._personID;
			}
			set
			{
				if ((this._personID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonIDChanging(value);
					this.SendPropertyChanging();
					this._personID = value;
					this.SendPropertyChanged("personID");
					this.OnpersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_BookingPassenger", Storage="_Booking", ThisKey="bookingID", OtherKey="bookingID", IsForeignKey=true)]
		public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.BookingPassengers.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.BookingPassengers.Add(this);
						this._bookingID = value.bookingID;
					}
					else
					{
						this._bookingID = default(int);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_BookingPassenger", Storage="_Person", ThisKey="personID", OtherKey="personID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.BookingPassengers.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.BookingPassengers.Add(this);
						this._personID = value.personID;
					}
					else
					{
						this._personID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="db_owner.Flight")]
	public partial class Flight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _flightID;
		
		private string _timeOfDeparture;
		
		private string _timeOfArrival;
		
		private System.Nullable<double> _traveltime;
		
		private System.Nullable<double> _price;
		
		private int _from;
		
		private int _to;
		
		private System.Nullable<int> _airplaneID;
		
		private int _takenSeats;
		
		private EntitySet<BookingFlight> _BookingFlights;
		
		private EntityRef<Airplane> _Airplane;
		
		private EntityRef<Airport> _Airport;
		
		private EntityRef<Airport> _Airport1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnflightIDChanging(int value);
    partial void OnflightIDChanged();
    partial void OntimeOfDepartureChanging(string value);
    partial void OntimeOfDepartureChanged();
    partial void OntimeOfArrivalChanging(string value);
    partial void OntimeOfArrivalChanged();
    partial void OntraveltimeChanging(System.Nullable<double> value);
    partial void OntraveltimeChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnfromChanging(int value);
    partial void OnfromChanged();
    partial void OntoChanging(int value);
    partial void OntoChanged();
    partial void OnairplaneIDChanging(System.Nullable<int> value);
    partial void OnairplaneIDChanged();
    partial void OntakenSeatsChanging(int value);
    partial void OntakenSeatsChanged();
    #endregion
		
		public Flight()
		{
			this._BookingFlights = new EntitySet<BookingFlight>(new Action<BookingFlight>(this.attach_BookingFlights), new Action<BookingFlight>(this.detach_BookingFlights));
			this._Airplane = default(EntityRef<Airplane>);
			this._Airport = default(EntityRef<Airport>);
			this._Airport1 = default(EntityRef<Airport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flightID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int flightID
		{
			get
			{
				return this._flightID;
			}
			set
			{
				if ((this._flightID != value))
				{
					this.OnflightIDChanging(value);
					this.SendPropertyChanging();
					this._flightID = value;
					this.SendPropertyChanged("flightID");
					this.OnflightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeOfDeparture", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string timeOfDeparture
		{
			get
			{
				return this._timeOfDeparture;
			}
			set
			{
				if ((this._timeOfDeparture != value))
				{
					this.OntimeOfDepartureChanging(value);
					this.SendPropertyChanging();
					this._timeOfDeparture = value;
					this.SendPropertyChanged("timeOfDeparture");
					this.OntimeOfDepartureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeOfArrival", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string timeOfArrival
		{
			get
			{
				return this._timeOfArrival;
			}
			set
			{
				if ((this._timeOfArrival != value))
				{
					this.OntimeOfArrivalChanging(value);
					this.SendPropertyChanging();
					this._timeOfArrival = value;
					this.SendPropertyChanged("timeOfArrival");
					this.OntimeOfArrivalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_traveltime", DbType="Float")]
		public System.Nullable<double> traveltime
		{
			get
			{
				return this._traveltime;
			}
			set
			{
				if ((this._traveltime != value))
				{
					this.OntraveltimeChanging(value);
					this.SendPropertyChanging();
					this._traveltime = value;
					this.SendPropertyChanged("traveltime");
					this.OntraveltimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[from]", Storage="_from", DbType="Int NOT NULL")]
		public int from
		{
			get
			{
				return this._from;
			}
			set
			{
				if ((this._from != value))
				{
					this.OnfromChanging(value);
					this.SendPropertyChanging();
					this._from = value;
					this.SendPropertyChanged("from");
					this.OnfromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[to]", Storage="_to", DbType="Int NOT NULL")]
		public int to
		{
			get
			{
				return this._to;
			}
			set
			{
				if ((this._to != value))
				{
					this.OntoChanging(value);
					this.SendPropertyChanging();
					this._to = value;
					this.SendPropertyChanged("to");
					this.OntoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airplaneID", DbType="Int")]
		public System.Nullable<int> airplaneID
		{
			get
			{
				return this._airplaneID;
			}
			set
			{
				if ((this._airplaneID != value))
				{
					if (this._Airplane.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnairplaneIDChanging(value);
					this.SendPropertyChanging();
					this._airplaneID = value;
					this.SendPropertyChanged("airplaneID");
					this.OnairplaneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_takenSeats", DbType="Int NOT NULL")]
		public int takenSeats
		{
			get
			{
				return this._takenSeats;
			}
			set
			{
				if ((this._takenSeats != value))
				{
					this.OntakenSeatsChanging(value);
					this.SendPropertyChanging();
					this._takenSeats = value;
					this.SendPropertyChanged("takenSeats");
					this.OntakenSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_BookingFlight", Storage="_BookingFlights", ThisKey="flightID", OtherKey="flightID")]
		public EntitySet<BookingFlight> BookingFlights
		{
			get
			{
				return this._BookingFlights;
			}
			set
			{
				this._BookingFlights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airplane_Flight", Storage="_Airplane", ThisKey="airplaneID", OtherKey="airplaneID", IsForeignKey=true)]
		public Airplane Airplane
		{
			get
			{
				return this._Airplane.Entity;
			}
			set
			{
				Airplane previousValue = this._Airplane.Entity;
				if (((previousValue != value) 
							|| (this._Airplane.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airplane.Entity = null;
						previousValue.Flights.Remove(this);
					}
					this._Airplane.Entity = value;
					if ((value != null))
					{
						value.Flights.Add(this);
						this._airplaneID = value.airplaneID;
					}
					else
					{
						this._airplaneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Airplane");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight", Storage="_Airport", ThisKey="from", OtherKey="airportID", IsForeignKey=true)]
		public Airport Airport
		{
			get
			{
				return this._Airport.Entity;
			}
			set
			{
				Airport previousValue = this._Airport.Entity;
				if (((previousValue != value) 
							|| (this._Airport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport.Entity = null;
						previousValue.Flights.Remove(this);
					}
					this._Airport.Entity = value;
					if ((value != null))
					{
						value.Flights.Add(this);
						this._from = value.airportID;
					}
					else
					{
						this._from = default(int);
					}
					this.SendPropertyChanged("Airport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight1", Storage="_Airport1", ThisKey="to", OtherKey="airportID", IsForeignKey=true)]
		public Airport Airport1
		{
			get
			{
				return this._Airport1.Entity;
			}
			set
			{
				Airport previousValue = this._Airport1.Entity;
				if (((previousValue != value) 
							|| (this._Airport1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport1.Entity = null;
						previousValue.Flights1.Remove(this);
					}
					this._Airport1.Entity = value;
					if ((value != null))
					{
						value.Flights1.Add(this);
						this._to = value.airportID;
					}
					else
					{
						this._to = default(int);
					}
					this.SendPropertyChanged("Airport1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookingFlights(BookingFlight entity)
		{
			this.SendPropertyChanging();
			entity.Flight = this;
		}
		
		private void detach_BookingFlights(BookingFlight entity)
		{
			this.SendPropertyChanging();
			entity.Flight = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="db_owner.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personID;
		
		private string _fname;
		
		private string _lname;
		
		private string _gender;
		
		private string _address;
		
		private string _phoneNo;
		
		private string _email;
		
		private string _birthdate;
		
		private string _password;
		
		private int _type;
		
		private EntitySet<BookingPassenger> _BookingPassengers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonIDChanging(int value);
    partial void OnpersonIDChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneNoChanging(string value);
    partial void OnphoneNoChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnbirthdateChanging(string value);
    partial void OnbirthdateChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    #endregion
		
		public Person()
		{
			this._BookingPassengers = new EntitySet<BookingPassenger>(new Action<BookingPassenger>(this.attach_BookingPassengers), new Action<BookingPassenger>(this.detach_BookingPassengers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int personID
		{
			get
			{
				return this._personID;
			}
			set
			{
				if ((this._personID != value))
				{
					this.OnpersonIDChanging(value);
					this.SendPropertyChanging();
					this._personID = value;
					this.SendPropertyChanged("personID");
					this.OnpersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNo", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string phoneNo
		{
			get
			{
				return this._phoneNo;
			}
			set
			{
				if ((this._phoneNo != value))
				{
					this.OnphoneNoChanging(value);
					this.SendPropertyChanging();
					this._phoneNo = value;
					this.SendPropertyChanged("phoneNo");
					this.OnphoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthdate", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string birthdate
		{
			get
			{
				return this._birthdate;
			}
			set
			{
				if ((this._birthdate != value))
				{
					this.OnbirthdateChanging(value);
					this.SendPropertyChanging();
					this._birthdate = value;
					this.SendPropertyChanged("birthdate");
					this.OnbirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_BookingPassenger", Storage="_BookingPassengers", ThisKey="personID", OtherKey="personID")]
		public EntitySet<BookingPassenger> BookingPassengers
		{
			get
			{
				return this._BookingPassengers;
			}
			set
			{
				this._BookingPassengers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookingPassengers(BookingPassenger entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_BookingPassengers(BookingPassenger entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
}
#pragma warning restore 1591
